import datetime
import numpy as np
import pandas as pd
import queue

from abc import ABCMeta, abstractmethod

from event import SignalEvent

class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Signal
    object for particular symbols based on the inputs of Bars
    (OLHCVI) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Stratgy object is agnostic to the data source,
    since it obtains the bar tuples from a queue object.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")


##########

class NaiveBuyAndSellStrategy(Strategy):
    """
    This is an extremely simple strategy that sends 10 "BOT" signal
    then 1 "SLD" signal.

    It is primarily used as a testing mechanism for the Strategy class.
    """

    def __init__(self, events_queue):
        """
        Initializes the strategy.
        """
        self.events_queue = events_queue

    def calculate_signals(self, market_event):
        """
        Parameters
        event - A MarketEvent object.
        """
        ticker = market_event.ticker

        count = 0
        if count < 10:
            signal_event = SignalEvent(ticker, "BOT", 10)
            self.events_queue.put(signal_event)
            count += 1
        else:
            signal_event = SignalEvent(ticker, "SLD", 100)
            self.events_queue.put(signal_event)
            count = 0 # reset count
